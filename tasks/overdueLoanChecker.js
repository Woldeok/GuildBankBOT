const pool = require('../database');
const Decimal = require('decimal.js');async function checkAndCollectOverdueLoans() {    let connection;    try {        connection = await pool.getConnection();        console.log('연체 대출 확인 및 압류 시작...');        const [overdueLoans] = await connection.query(            'SELECT id, user_id, amount, interest_rate FROM loans WHERE due_date < NOW() AND status = \'active\''        );        if (overdueLoans.length === 0) {            console.log('연체된 대출이 없습니다.');            return;        }        console.log(`총 ${overdueLoans.length}건의 연체 대출을 발견했습니다. 압류를 시작합니다.`);        for (const loan of overdueLoans) {            await connection.beginTransaction();            try {                const interest = Math.floor(loan.amount * loan.interest_rate);                const totalAmountToCollect = loan.amount + interest;                await connection.query(                    'UPDATE users SET balance = balance - ? WHERE id = ?',                    [totalAmountToCollect, loan.user_id]                );                await connection.query(                    'UPDATE guild_bank SET balance = balance + ? WHERE id = 1',                    [totalAmountToCollect]                );                await connection.query(                    'UPDATE loans SET status = \'paid\' WHERE id = ?',                    [loan.id]                );                await connection.query(                    'INSERT INTO guild_transactions (user_id, amount, type) VALUES (?, ?, ?)',                    [loan.user_id, totalAmountToCollect, 'loan_collection']                );                await connection.commit();                console.log(`✅ 대출 ID ${loan.id} (유저: ${loan.user_id}) ${totalAmountToCollect.toFixed(0)}원 압류 완료.`);            } catch (error) {                await connection.rollback();                console.error(`❌ 대출 ID ${loan.id} (유저: ${loan.user_id}) 압류 중 오류 발생:`, error);            }        }        console.log('연체 대출 확인 및 압류 완료.');    } catch (error) {        console.error('연체 대출 확인 중 데이터베이스 연결 오류:', error);    } finally {        if (connection) {            connection.release();        }    }}module.exports = { checkAndCollectOverdueLoans };